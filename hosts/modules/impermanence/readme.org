This is loosely based on the well-known
[[https://grahamc.com/blog/erase-your-darlings/][erase your darlings]] and
[[https://mt-caret.github.io/blog/posts/2020-06-29-optin-state.html][encypted
Btrfs root with opt-in state on NixOS]]: =/= is a tmpfs, the system (mostly
=/nix=) and data (=/srv=) are on Btrfs.

*** Prelude

Format the disk for GPT and EFI:

#+begin_src bash
shopt -s extglob

parted --script "${device?}" mklabel gpt
parted --script --align optimal "${device?}" mkpart EFI 0% 256MiB
parted --script "${device?}" set 1 esp on
mkfs.fat -n EFI -F32 "${device?}"?(p)1
#+end_src

*** Encrypted boot, system and data

More geared towards a laptop (e.g.: [[../../acheron/system/default.nix]]). It's safe to
store a LUKS key in the initrd since it's on the encrypted partition (GRUB will
prompt the password).

Optionally, add a rescue partition (not protected by the full disk encryption):

#+begin_src bash
parted --script --align optimal "${device?}" mkpart rescue 256MiB 16GiB
mkfs.ext4 -L rescue "${device?}"?(p)2
#+end_src

Add an encrypted root partition:

#+begin_src bash
parted --script --align optimal "${device?}" mkpart root 16GiB 100%
# GRUB 2.06 doesn't have support for LUKS2 (planned for the next release) nor
# Argon yet.
cryptsetup luksFormat --type luks2 --pbkdf pbkdf2 "${device?}"?(p)3
cryptsetup open "${device?}"?(p)3 root
#+end_src

And format it (the =system= subvolumes are required by =install-grub.pl=):

#+begin_src bash
mkfs.btrfs /dev/mapper/root
mount /dev/mapper/root /mnt
btrfs subvolume create /mnt/system
btrfs subvolume create /mnt/system/boot
btrfs subvolume create /mnt/system/nix
btrfs subvolume create /mnt/system/swap
btrfs subvolume create /mnt/system/tmp
btrfs subvolume create /mnt/state
# Add more subvolumes as necessary:
# btrfs subvolume create /mnt/state/users/untrusted
# chattr +C /mnt/state/users/untrusted
mkdir -p /mnt/state/system/etc/ssh
ssh-keygen -t ed25519 -N '' -f /mnt/state/system/etc/ssh/ssh_host_ed25519_key
# Don't forget to update the UUIDs in the Nix configuration and the SOPS files.
umount /mnt
#+end_src

Prepare the NixOS installation:

#+begin_src bash
mount -t tmpfs tmpfs /mnt
mkdir -p /mnt/{boot,etc/nixos,nix,srv,swap}
mount -o subvol=system/boot,compress=zstd /dev/mapper/root /mnt/boot
mkdir /mnt/boot/efi
mount --label EFI --target /mnt/boot/efi
mount -o subvol=system/nix,compress=zstd,noatime /dev/mapper/root /mnt/nix
mount -o subvol=system/swap,compress=zstd /dev/mapper/root /mnt/swap
btrfs filesystem mkswapfile --size 16G /mnt/swap/swap # GiB
# You might want to swapon /mnt/swap/swap.
# Update the kernel's resume_offset with this value:
btrfs inspect-internal map-swapfile --resume-offset /mnt/swap/swap
mount -o subvol=state,compress=zstd /dev/mapper/root /mnt/srv

mkdir --mode 0700 /mnt/srv/system/etc/luks
dd if=/dev/urandom of=/mnt/srv/system/etc/luks/root.key bs=1024 count=4
chmod 0400 /mnt/srv/system/etc/luks/root.key
cryptsetup luksAddKey "${device?}"?(p)3 /mnt/srv/system/etc/luks/root.key
#+end_src

*** Encrypted system and data

More geared towards a server (e.g.: [[../../node-01/system/default.nix]]). It's
not safe to store a LUKS key in the initrd (and the environment of the machine
has to be trusted, or Secure Boot enabled) but SSH can be started early for
remote unlocking.

Add a boot partition:

#+begin_src bash
parted --script --align optimal "${device?}" mkpart boot 256MiB 1GiB
mkfs.ext4 -L boot "${device?}"2
#+end_src

Add an encrypted root partition:

#+begin_src bash
parted --script --align optimal "${device?}" mkpart root 1GiB 100%
# GRUB 2.06 doesn't have support for LUKS2 (planned for the next release) nor
# Argon yet.
cryptsetup luksFormat --type luks2 --pbkdf pbkdf2 "${device?}"3
cryptsetup open "${device?}"3 root
#+end_src

And format it (the =system= subvolumes are required by =install-grub.pl=):

#+begin_src bash
mkfs.btrfs /dev/mapper/root
mount /dev/mapper/root /mnt
btrfs subvolume create /mnt/system
btrfs subvolume create /mnt/system/nix
btrfs subvolume create /mnt/system/swap
btrfs subvolume create /mnt/system/tmp
btrfs subvolume create /mnt/state
# Add more subvolumes as necessary, see the full disk encryption section.
mkdir -p /mnt/state/system/etc/ssh
ssh-keygen -t ed25519 -N '' -f /mnt/state/system/etc/ssh/ssh_host_ed25519_key
# Don't forget to update the UUIDs in the Nix configuration and the SOPS files.
ssh-keygen -t ed25519 -N '' -f /mnt/state/system/etc/ssh/ssh_initrd_ed25519_key
# Then set boot.initrd.network.ssh.hostKeys = [ /srv/system/etc/ssh/ssh_initrd_ed25519_key ]
umount /mnt
#+end_src

Prepare the NixOS installation:

#+begin_src bash
mount -t tmpfs tmpfs /mnt
mkdir -p /mnt/{boot,etc/nixos,nix,srv,swap}
mount --label boot /mnt/boot
mkdir /mnt/boot/efi
mount --label EFI --target /mnt/boot/efi
mount -o subvol=system/nix,compress=zstd,noatime /dev/mapper/root /mnt/nix
mount -o subvol=system/swap,compress=zstd /dev/mapper/root /mnt/swap
btrfs filesystem mkswapfile --size 2G /mnt/swap/swap # GiB
# You might want to swapon /mnt/swap/swap.
mount -o subvol=state,compress=zstd /dev/mapper/root /mnt/srv
#+end_src

*** Postlude

Install NixOS:

#+begin_src bash
git clone https://github.com/ether42/dotfiles
cd dotfiles
nixos-install --no-root-password --root /mnt --flake .#${hostname?}
#+end_src

Or from scratch, without flakes:

#+begin_src bash
nixos-generate-config --root /mnt # Useful to check boot.initrd.availableKernelModules.
cd /mnt/etc/nixos
ln -s ../../path/to/configuration.nix
nixos-install --no-root-password --root /mnt
# nixos-enter --root /mnt
#+end_src
