#+title: Personal Bash configuration

# GitHub's parser doesn't handle [[][==]]

* Table of Contents :toc_3:
- [[#foreword][Foreword]]
- [[#behavior-change][Behavior change]]
  - [[#system-independence][System independence]]
  - [[#globbing][Globbing]]
  - [[#completion][Completion]]
  - [[#input][Input]]
  - [[#terminal-handling][Terminal handling]]
  - [[#history][History]]
- [[#unnoteworthy-configurations][Unnoteworthy configurations]]
  - [[#prompt][Prompt]]
  - [[#aliases][Aliases]]
  - [[#functions][Functions]]
  - [[#editor][EDITOR]]
  - [[#manpath][MANPATH]]
  - [[#pager][PAGER]]
  - [[#path][PATH]]
- [[#os-specific][OS-specific]]
  - [[#macos][macOS]]
    - [[#homebrew][Homebrew]]
    - [[#other][Other]]
- [[#tips-and-tricks][Tips and tricks]]
- [[#afterword][Afterword]]

* Foreword

Enable undefined variables reporting to rapidly isolate problems:

#+begin_src shell
set -u
#+end_src

* Behavior change

** System independence

On some systems, =PROMPT_COMMAND= may be set externally and may mess up things:

#+begin_src shell
PROMPT_COMMAND=
#+end_src

** Globbing

[[https://www.gnu.org/software/bash/manual/html_node/Pattern-Matching.html#Pattern-Matching][extglob]]
is better explained by Bash's manual. In short, it extends pattern matching and
allows some nice things like =!(file)= meaning /all but this file/:

#+begin_src shell
shopt -s extglob
#+end_src

** Completion

Allow Bash to edit the readline buffer during completions (see =dirspell=, it
will also replace variables by their value):

#+begin_src shell
if [ ${BASH_VERSINFO[0]} -gt 4 ] || [ ${BASH_VERSINFO[0]} -ge 4 -a ${BASH_VERSINFO[1]} -ge 3 ]; then
  shopt -s direxpand
fi
#+end_src

Allow Bash to correct typos:

#+begin_src shell
if shopt -q direxpand &> /dev/null; then
  shopt -s dirspell # Fix names during tab completion.
fi
shopt -s cdspell # cd will try to correct an invalid name, displaying it.
#+end_src

And disable useless completion on empty line:

#+begin_src shell
shopt -s no_empty_cmd_completion
#+end_src

I also like to disable the programmable completion altogether as it will hinder
actual tab completion most of the time:

#+begin_src shell
complete -r
#+end_src

** Input

For good measure, make sure readline is in Emacs mode:

#+begin_src shell
set -o emacs
#+end_src

** Terminal handling

It's better to always recheck for the terminal size, as it may avoid garbling
the input method:

#+begin_src shell
shopt -s checkwinsize
#+end_src

** History

Proper history handling is important, but the default configuration is quite
inappropriate and often lead to data loss: an exiting Bash instance may
overwrite the history of other instances. Fortunately it's easy to fix:

#+begin_src shell
shopt -s histappend
#+end_src

By default, 500 lines of history are remembered, let's tell Bash we don't want
any limitations:

#+begin_src shell
history_size=$((${BASH_VERSINFO[0]} > 4 || (${BASH_VERSINFO[0]} >= 4 && ${BASH_VERSINFO[1]} >= 3) ? -1 : 1000000000))
HISTSIZE=$history_size
HISTFILESIZE=$history_size
unset history_size
#+end_src

However, we may still want to have a maintainable history file, so splitting it
by session seems to be a good idea:

#+begin_src shell
declare -r history_directory=~/.logs/bash
# Should be read-only to disallow spurious changes during the session
# (for example, when sourcing again .bashrc).
declare -r HISTFILE=$history_directory/$(hostname)/$(date -u +%F_%T_%Z)_$$
history_subdirectory=$(dirname "$HISTFILE")
[ -d "$history_subdirectory" ] || mkdir -p "$history_subdirectory"
unset history_subdirectory
#+end_src

We may still lose data if the shell is abruptly terminated, so tell Bash to
write the history immediately:

#+begin_src shell
# There seems to be a bug is some Bash versions where -a does nothing,
# so rely on the less efficient -w.
PROMPT_COMMAND=${PROMPT_COMMAND:+$PROMPT_COMMAND;}'history -w'
#+end_src

It's nice to be able to quickly search in all these files, since this setup
won't load them at the beginning of a new session (I like to start fresh):

#+begin_src shell
hist() {
  if hash ag &> /dev/null; then
    ag "$@" "$history_directory"
  else
    grep -r "$@" "$history_directory"
  fi
}
declare -rfx hist
#+end_src

Show the date of commands:

#+begin_src shell
HISTTIMEFORMAT='%F %T %Z '
#+end_src

Finally, tweak history handling to avoid redundant information and ease
sensitive information hiding:

#+begin_src shell
HISTCONTROL=ignoredups # Ignore duplicates.
HISTCONTROL+=:erasedups # Remove duplicates.
HISTCONTROL+=:ignorespace # Don't store lines beginning with spaces.
#+end_src

* Unnoteworthy configurations

** Prompt

I prefer a clean and concise prompt, mine only tells which host I'm on, in which
directory and if last command resulted in an error (exit code wasn't zero).

But first, let's define some termcaps:

#+begin_src shell
if hash tput &> /dev/null; then
  # It's totally fine to not check for termcaps availability here
  # as it will simply result in an empty string.
  foreground_red=$(tput setaf 1)
  foreground_cyan=$(tput setaf 6)
  reset=$(tput sgr0)
fi
declare -r foreground_red foreground_cyan reset
#+end_src

Then, let's run a handler after each command input to grab the exit code:

#+begin_src shell
prompt_config() {
  if [ $? -eq 0 ]; then
    prompt_color=$foreground_cyan
  else
    prompt_color=$foreground_red
  fi
}
declare -rfx prompt_config

# On macOS, $PROMPT_COMMAND may use the function update_terminal_cwd
# to display the current directory in the window's decoration.
PROMPT_COMMAND=prompt_config${PROMPT_COMMAND:+;$PROMPT_COMMAND}
#+end_src

And finally customize the prompt itself:

#+begin_src shell
# \[\] allows readline to correctly calculate the string's size.
PS1='\h:\W \[$(printf -- '%s' "$prompt_color")\]\$\[$(printf -- '%s' "$reset")\] '
#+end_src

** Aliases

I don't like aliases as they are often abused where functions should be used.
However, they are fine to correct recurrent typos or really small commands:

#+begin_src shell
alias l=ls
#+end_src

** Functions

Create some CPU load:

#+begin_src shell
busy() (
  trap 'kill $(jobs -p) &> /dev/null' SIGINT SIGQUIT SIGTERM
  local -i i=${1:-1}
  while [ $i -gt 0 ]; do
    while :; do :; done &
    i=$((i - 1))
  done
  wait
)
#+end_src

** EDITOR

Nothing special, only in order of preference:

#+begin_src shell
if hash emacs &> /dev/null; then
  EDITOR='emacs -nw'
elif hash mg &> /dev/null; then
  EDITOR=mg
elif hash nano &> /dev/null; then
  EDITOR=nano
fi

export EDITOR
#+end_src

** MANPATH

#+begin_src shell
if hash man &> /dev/null; then
  export MANPATH=$(man --path)
fi
#+end_src

** PAGER

Nothing special, only in order of preference:

#+begin_src shell
if hash less &> /dev/null; then
  PAGER='less -r'
elif hash most &> /dev/null; then
  PAGER=most
fi

export PAGER
#+end_src

** PATH

Make sure the =PATH= doesn't contain redundant directories and order it so that
I can override the system directories easily:

#+begin_src shell
order_path() {
  local -a path
  IFS=: read -r -a paths <<< "$PATH"
  PATH=
  local path
  # Standard locations comes after any user-defined $PATH.
  for path in ~/.pub-cache/bin ~/.cargo/bin /{,usr/{,local/}}{bin,sbin} "${paths[@]}"; do
    # If path exists and if it hasn't already been seen, prepend it.
    if [ -d "$path" ] && [[ ! "$PATH" =~ (^|:)"$path"(:|$) ]]; then
      PATH=$path${PATH+:$PATH}
    fi
  done
  export PATH
}
declare -rfx order_path
#+end_src

Apply it:

#+begin_src shell
order_path
#+end_src

* OS-specific

** macOS

This configuration is only interesting to have on macOS, so let's guard other
OSes against it:

#+begin_src shell
if [ "$(uname)" = Darwin ]; then
#+end_src

*** Homebrew

First things first, let's opt-out of [[https://brew.sh/][Homebrew]] analytics...

#+begin_src shell
  export HOMEBREW_NO_ANALYTICS=1
#+end_src

I also prefer to not install applications system-wide:

#+begin_src shell
  export HOMEBREW_CASK_OPTS='--appdir=~/Applications'
#+end_src

And since Homebrew has trouble in virtual environments, let's deactivate them
when invoked:

#+begin_src shell
  brew() {
    [ -n "$VIRTUAL_ENV" ] && deactivate
    command brew "$@"
  }
  declare -rfx brew
#+end_src

*** Other

Finally, make macOS's environment be sane when SSH'ing to other OSes:

#+begin_src shell
  export LC_ALL=en_US.UTF-8
#+end_src

#+begin_src shell
fi
#+end_src

* Tips and tricks

- did you know about =CDPATH=?

* Afterword

Unfortunately, many scripts don't properly use parameter expansion, so revert
what we did in the [[#foreword][foreword]] (and for the day-to-day CLI usage, it
may be a bit too verbose):

#+begin_src shell
set +u
#+end_src
