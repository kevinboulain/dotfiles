#+options: H:4
* Table of contents :noexport:toc_4:
- [[#personal-bash-configuration][Personal Bash configuration]]
  - [[#prelude][Prelude]]
  - [[#behavior][Behavior]]
  - [[#history][History]]
  - [[#prompt][Prompt]]
  - [[#aliases][Aliases]]
  - [[#postlude][Postlude]]

* Personal Bash configuration

** Prelude

Catch undefined variables in this configuration:

#+begin_src shell
set -u
#+end_src

** Behavior

[[https://www.gnu.org/software/bash/manual/html_node/Pattern-Matching.html#Pattern-Matching][=extglob=]]
is better explained by Bash's manual. In short, it extends pattern matching and
allows some nice things like =!(file)= meaning /all but this file/:

#+begin_src shell
shopt -s extglob
#+end_src

Allow Bash to edit the readline buffer during completion and correct typos:

#+begin_src shell
shopt -s direxpand
shopt -s dirspell # Fix names during tab completion.
shopt -s cdspell # cd will try to correct an invalid name, displaying it.
#+end_src

Keep the completion out of the way (it tries to be smart but often prevents
actual tab completion):

#+begin_src shell
complete -r
shopt -s no_empty_cmd_completion
#+end_src

Always recheck the terminal size, as it may avoid garbling the input method:

#+begin_src shell
shopt -s checkwinsize
#+end_src

** History

Append to instead of overwrite the history file on exit:

#+begin_src shell
shopt -s histappend
#+end_src

By default only 500 lines of history are preserved, make that unlimited:

#+begin_src shell
HISTSIZE=-1
HISTFILESIZE=-1
#+end_src

But create a dedicated history file per session:

#+begin_src shell
declare -r history_directory=~/.local/share/bash
# Should be read-only to disallow spurious changes during the session
# (for example, when sourcing again .bashrc).
declare -r HISTFILE=$history_directory/$HOSTNAME/$(date -u +%F_%T_%Z)_$$
history_subdirectory=$(dirname "$HISTFILE")
[ -d "$history_subdirectory" ] || mkdir -p "$history_subdirectory"
unset history_subdirectory
#+end_src

History may still be lost when the shell is abruptly terminated so write it
after every command:

#+begin_src shell
PROMPT_COMMAND=${PROMPT_COMMAND:+$PROMPT_COMMAND;}'history -a'
#+end_src

And to quickly search in all these files, since this setup won't load them at
the beginning of a new session (I like to start fresh):

#+begin_src shell
hist() {
  if type -p rg &> /dev/null; then
    rg "$@" "$history_directory"
  else
    grep -r "$@" "$history_directory"
  fi
}
declare -rfx hist
#+end_src

Display the date alongside the command:

#+begin_src shell
HISTTIMEFORMAT='%F %T %z '
#+end_src

Finally, tweak history handling to avoid redundant information and ease
the hiding of sensitive information:

#+begin_src shell
HISTCONTROL=ignoredups # Ignore duplicates.
HISTCONTROL+=:erasedups # Remove duplicates.
HISTCONTROL+=:ignorespace # Ignore lines starting with spaces.
#+end_src

** Prompt

First, some termcaps:

#+begin_src shell
if type -p tput &> /dev/null; then
  # Will result in an empty string if termcaps aren't available.
  foreground_grey=$(tput setaf 8)
  reset=$(tput sgr0)
fi
declare -r foreground_grey reset
#+end_src

Then, run a handler after each command input to grab the exit code:

#+begin_src shell
prompt_config() {
  if [ $? -eq 0 ]; then
    prompt_color=
  else
    prompt_color=$foreground_grey
  fi
}
declare -rfx prompt_config

PROMPT_COMMAND=prompt_config${PROMPT_COMMAND:+;$PROMPT_COMMAND}
#+end_src

And finally customize the prompt itself:

#+begin_src shell
# \[\] allows readline to correctly calculate the string's size.
PS1='\h:\W \[$(printf -- '%s' "$prompt_color")\]\$\[$(printf -- '%s' "$reset")\] '
#+end_src

** Aliases

I usually prefer functions instead of aliases, unless it's to catch a typo:

#+begin_src shell
alias l=ls
#+end_src

** Postlude

#+begin_src shell
set +u
#+end_src
