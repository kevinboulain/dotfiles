#+options: H:4
* Table of contents :noexport:toc_4:
- [[#personal-emacs-configuration][Personal Emacs configuration]]
  - [[#general-setup][General setup]]
    - [[#package-management][Package management]]
    - [[#profiling][Profiling]]
    - [[#debugging][Debugging]]
    - [[#built-in][Built-in]]
    - [[#theme][Theme]]
      - [[#mode-line][Mode-line]]
      - [[#delimiters][Delimiters]]
      - [[#line-numbering][Line numbering]]
      - [[#buffer-dimming][Buffer dimming]]
      - [[#exporting][Exporting]]
    - [[#completion][Completion]]
    - [[#whitespace][Whitespace]]
    - [[#moving-around][Moving around]]
  - [[#extensions][Extensions]]
    - [[#remembering-keybindings][Remembering keybindings]]
    - [[#error-checking][Error checking]]
    - [[#git][Git]]
    - [[#snippets][Snippets]]
    - [[#programming][Programming]]
      - [[#language-server-protocol][Language Server Protocol]]
      - [[#literate-programming][Literate programming]]
      - [[#agda][Agda]]
      - [[#bqn][BQN]]
      - [[#c][C]]
      - [[#dart][Dart]]
      - [[#glsl][GLSL]]
      - [[#go][Go]]
      - [[#idris][Idris]]
      - [[#lua][Lua]]
      - [[#nix][Nix]]
      - [[#openscad][OpenSCAD]]
      - [[#python][Python]]
      - [[#rust][Rust]]
      - [[#scheme][Scheme]]
      - [[#shell][Shell]]
      - [[#yaml][YAML]]
    - [[#text][Text]]
      - [[#spell-checking][Spell checking]]
      - [[#context][ConTeXt]]
      - [[#markdown][Markdown]]
      - [[#org][Org]]
      - [[#gettext][gettext]]
      - [[#man][man]]
    - [[#social][Social]]
      - [[#irc][IRC]]
      - [[#notmuch][Notmuch]]

* Personal Emacs configuration

#+begin_src emacs-lisp
;; -*- lexical-binding: t -*-
#+end_src

** General setup

*** Package management

Was done in [[https://github.com/raxod502/straight.el][straight.el]] for a long
time but is now exclusively done in the Nix configuration (no need for two
package managers).

I still use [[https://github.com/jwiegley/use-package][use-package]] which gives
a better structure to this configuration and has other niceties, like deferred
loading.

#+begin_src emacs-lisp
(eval-when-compile
  (require 'use-package))
(require 'bind-key) ; `use-package' comes with its own way to define keybindings.
#+end_src

*** Profiling

To determine which of the below packages take the most time to load, invoke
Emacs in the following way:

#+begin_src shell :tangle no
emacs --benchmark-init
#+end_src

It won't take into account the above =use-package= setup though.

#+begin_src emacs-lisp
(when (member "--benchmark-init" command-line-args)
  (use-package benchmark-init
    :init
    (add-to-list 'command-switch-alist '("--benchmark-init" . (lambda (switch) (benchmark-init/deactivate))))))
#+end_src

=use-package= has its own =M-x use-package-report= (to figure out deferrable
packages).

[[http://www.randomsample.de/profile-dotemacs.el][profile-dotemacs.el]] is also
great but limited to a file.

*** Debugging

To debug problems happening early, set =debug-on-error= from the command line:

#+begin_src shell :tangle no
emacs --eval '(setq debug-on-error t)'
#+end_src

In case it appears to be an initialization order issue (for example Org can load
Gnus first so Gnus should be configured before loading Org) =apropos-value=,
=add-variable-watcher= and =C-h v load-history= might help proving it.

It's sometimes useful to tracks commands:

#+begin_src emacs-lisp
(use-package interaction-log)
#+end_src

*** Built-in

Tell Emacs it should always prefer a more recent =.el= file instead of loading a
possibly out of date =.elc= file:

#+begin_src emacs-lisp
(setq load-prefer-newer t)
#+end_src

Convert the tab character to spaces:

#+begin_src emacs-lisp
(setq-default tab-width 2 ; Tab size.
              indent-tabs-mode nil) ; Indent with spaces only.
#+end_src

At the cost of convenience, prevent Emacs from littering and more importantly,
leaking file contents:

#+begin_src emacs-lisp
(setq
 ;; Backups and autosaves tend to end up in unfortunate places, with broader
 ;; permissions and might leak secret contents (e.g.: password store).
 auto-save-default nil
 backup-inhibited t
 ;; Somewhat related to leaks: do not save credentials, ever.
 auth-source-save-behavior nil
 ;; I'm not sure lockfies provide any advantages besides spamming the filesystem
 ;; and breaking other tools.
 create-lockfiles nil)
#+end_src

Quiet down Emacs a bit:

#+begin_src emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p) ; Replace the 'yes'/'no' question by its 'y'/'n' counterpart.

(setq inhibit-startup-screen t) ; Don't show the 'GNU Emacs' buffer.
(defun display-startup-echo-area-message ()
  "Disable 'For information about GNU Emacs...' in the minibuffer.
`inhibit-startup-echo-area-message' must be set in the init
file to your username... Let's override the function instead...")

(setq native-comp-async-report-warnings-errors 'silent) ; Prevents loads of compilation warnings.
#+end_src

But I prefer more reporting when it's related to the point:

#+begin_src emacs-lisp
(line-number-mode 1) ; Show line number in the mode-line.
(column-number-mode 1) ; Show column number in the mode-line.

(global-hl-line-mode) ; Highlight the line containing the cursor.

(show-paren-mode 1) ; Show matching parenthesis/bracket/...
#+end_src

For conflicting buffer names, it's better the distinction provides some context:

#+begin_src emacs-lisp
(when (require 'uniquify nil t)
  ;; Instead of suffixing <1>, <2>, ... to the buffer name, suffix the part of
  ;; the path that is different. Suffixing is preferred to prefixing because it
  ;; makes switching to a buffer a bit more intuitive when completing names.
  (setq uniquify-buffer-name-style 'post-forward
        ;; Removing common suffixes confuses me, especially when they're long.
        uniquify-strip-common-suffix nil))
#+end_src

Now, configure Emacs's behavior depending on the environment. Globally:

#+begin_src emacs-lisp
(menu-bar-mode 0) ; Remove the f10 menu.
#+end_src

In terminals:

#+begin_src emacs-lisp
(unless window-system
  (set-display-table-slot standard-display-table 'wrap ?\ ) ; Remove the \ for a wrapped line, the counterpart of fringes.
  (when (require 'mouse nil t)
    ;; Enable mouse interaction in terminals.
    (xterm-mouse-mode t) ; That seems a bit too hard-coded?
    ;; tmux also scrolls five lines at a time.
    ;; https://github.com/tmux/tmux/blob/f08c019d419d7deefce2e8ab699aad404895355a/CHANGES#L1296
    (bind-keys ([mouse-4] . (lambda () (interactive) (scroll-down 5)))
               ([mouse-5] . (lambda () (interactive) (scroll-up 5)))
               ([mouse-6] . (lambda () (interactive) (scroll-right 5)))
               ([mouse-7] . (lambda () (interactive) (scroll-left 5))))))
#+end_src

And in graphical environments, just in case I happen to run it outside of a
terminal:

#+begin_src emacs-lisp
(when window-system
  (fringe-mode 0) ; Fringes are too stracting.
  (toggle-scroll-bar 0) ; Remove the scroll bar.
  (tool-bar-mode 0) ; Remove the new/save/copy/... menu.
  (add-to-list 'default-frame-alist '(font . "Iosevka Term-8")))
#+end_src

Some window-related configuration:

#+begin_src emacs-lisp
(setq split-width-threshold 1) ; Split horizontally by default.

(windmove-default-keybindings) ; Default keybindings for windmove: shift + arrows.
#+end_src

Some text-editing-related configuration:

#+begin_src emacs-lisp
(setq-default fill-column 80) ; More practical than the default of 70.
(setq sentence-end-double-space nil) ; Don't insert two spaces after a sentence (for example, with M-q).
#+end_src

Other unrelated configurations:

#+begin_src emacs-lisp
(setq confirm-kill-processes nil ; Kill background processes on exit.
      dired-dwim-target t ; Guess target directory.
      sort-fold-case t ; Case-insensitive sort-lines.
      vc-handled-backends nil) ; Disable source control handling.

;; Recursive minibuffer.
(setq enable-recursive-minibuffers t)
(minibuffer-depth-indicate-mode 1)
#+end_src

*** Theme

First, fix Emacs's behavior and make it unload any theme before loading another
one:

#+begin_src emacs-lisp
;; http://www.bartuka.com/pages-output/personal-emacs-configuration/
(defadvice load-theme (before theme-dont-propagate activate)
  "Disable all theme effects before enabling new ones."
  (mapc #'disable-theme custom-enabled-themes))
#+end_src

It's important to load the theme early as later configuration may use or copy
faces provided by the theme:

#+begin_src emacs-lisp
(use-package tao-yin-theme
  :init
  (setq tao-theme-use-sepia nil) ; Original behavior before sepia was introduced.
  :config
  ;; There is no proper way to use `custom-theme-set-faces' before `load-theme'
  ;; or `enable-theme', the behavior has also changed in Emacs 27:
  ;;  - https://emacs.stackexchange.com/a/14370
  ;;  - https://emacs.stackexchange.com/a/28947
  ;;  - https://emacs.stackexchange.com/q/48365
  ;; Calling `custom-theme-set-faces' before loading a theme will only prepend
  ;; to 'theme-settings while doing it after will remove the duplicated entries.
  ;;
  ;; First, load the theme (it also `enable-theme' by default) for the following
  ;; customizations to work.
  (load-theme 'tao-yin t)
  ;; Second, customize the theme.
  (custom-theme-set-faces
   'tao-yin
   ;; Override the mode-line{,-inactive} faces to match
   ;; vertical-border, see the [[*Mode-line]].
   '(mode-line ((t (:inherit vertical-border))))
   '(mode-line-inactive ((t (:inherit vertical-border))))
   ;; With d44ecab the background has been made darker, make it more noticeable.
   '(hl-line ((t (:inherit secondary-selection))))
   ;; `sieve-mode' does it own thing, overwrite the few faces.
   '(sieve-action-commands ((t (:inherit font-lock-keyword-face))))
   '(sieve-control-commands ((t (:inherit font-lock-keyword-face))))
   '(sieve-test-commands ((t (:inherit font-lock-keyword-face))))
   '(sieve-tagged-arguments ((t (:inherit font-lock-type-face))))
   ;; The vertico-current face should match hl-line, it's too jarring
   ;; by default.
   '(vertico-current ((t (:inherit hl-line)))))
  ;; Third, reenable it again to apply changes.
  (enable-theme 'tao-yin))
#+end_src

**** Mode-line

Simpler mode-line format (I'd prefer moving this information to the minibuffer
but it has a lot of edge cases that are difficult or impossible to handle):

#+begin_src emacs-lisp
(defun my--mode-line-circe-tracking-buffers ()
  "Circe maintains a list of buffers with activity.
Join them together as they are already propertized in case of highlight."
  (when (boundp 'tracking-buffers)
    (cl-flet ((filter (buffer)
                      (text-property-any 0 1 'face 'circe-highlight-nick-face buffer)))
      (string-join (append ; Put the highlighted buffers first.
                    (sort (seq-filter #'filter tracking-buffers) 'string-collate-lessp)
                    (sort (seq-filter (lambda (buffer) (not (filter buffer))) tracking-buffers) 'string-collate-lessp))
                   " "))))

(setq-default mode-line-format
              '("%l,%c " ; Line and column.
                (:eval ; Major mode (replaces %m).
                 (string-trim-right (prin1-to-string major-mode) "-mode"))
                " "
                (:eval ; Buffer indication.
                 (propertize (if (buffer-file-name) (abbreviate-file-name (buffer-file-name)) (buffer-name))
                             'face (if (and (buffer-file-name) (buffer-modified-p))
                                       'warning 'mode-line-buffer-id)))
                (:eval ; IRC.
                 (when (> (length (my--mode-line-circe-tracking-buffers)) 0)
                   (concat " " (my--mode-line-circe-tracking-buffers)))
                 (when (fboundp 'circe-lagmon-format-mode-line-entry)
                   (concat " " (string-trim (circe-lagmon-format-mode-line-entry)))))
                " %-")) ; Padding.
#+end_src

**** Delimiters

Most of the time, brackets, parentheses, braces, etc, are paired together.
=show-paren-mode= helps by showing the matching one but it's sometimes a bit too
cumbersome to use as you have to move the point.
[[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] helps by
coloring each pair:

#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook ((prog-mode . rainbow-delimiters-mode)
         (text-mode . rainbow-delimiters-mode)))
#+end_src

**** Line numbering

*Disabled for now*.

#+begin_src emacs-lisp :tangle no
(when (boundp 'display-line-numbers) ; Introduced in Emacs 26.
  (set-face-attribute 'line-number-current-line nil
                      ;; Highlight the line current line number.
                      :foreground (face-attribute 'font-lock-keyword-face :foreground nil t)
                      ;; Highlight the margin with the same line highlighting.
                      :background (when (bound-and-true-p global-hl-line-mode)
                                    (face-attribute 'hl-line :background nil t)))
  (global-display-line-numbers-mode))
#+end_src

**** Buffer dimming

*Disabled for now*.

Slightly dim the inactive buffers:

#+begin_src emacs-lisp :tangle no
(defun my--dim-color (rgb percent)
  "Dim the RGB color expressed in the format #rrggbb by PERCENT."
  ;; Looks like there is no color-hex-to-rgb.
  (let ((r (/ (float (string-to-number (substring rgb 1 3) 16)) (float 255)))
        (g (/ (float (string-to-number (substring rgb 3 5) 16)) (float 255)))
        (b (/ (float (string-to-number (substring rgb 5 7) 16)) (float 255))))
    (apply 'color-rgb-to-hex
           (nconc (apply 'color-hsl-to-rgb
                         (apply 'color-darken-hsl (nconc (color-rgb-to-hsl r g b) `(,percent))))
                  '(2)))))

;; https://github.com/mina86/auto-dim-other-buffers.el/issues/16
(use-package auto-dim-other-buffers
  :hook (after-init . auto-dim-other-buffers-mode)
  :config
  (set-face-attribute 'auto-dim-other-buffers-face nil
                      ;; :foreground (my--dim-color (face-attribute 'default :foreground nil t) 5)
                      :background (my--dim-color (face-attribute 'default :background nil t) 5)))
#+end_src

**** Exporting

Sometimes, it's nice to show properly rendered code. Projects like
[[http://pygments.org/][Pygments]] exist but it would be preferable to use your
pretty Emacs configuration.
[[https://github.com/hniksic/emacs-htmlize][htmlize]] does just that and will
export a buffer to HTML, keeping your theme and other settings.

Use =M-x htmlize-buffer=.

Or =C-SPC= two times then move the point to the end of the region then =M-x
htmlize-region= (so you don't render the region selection overlay).

This configuration even allows to call Emacs like this:

#+begin_src shell :tangle no
emacs --htmlize path/to/file # outputs path/to/file.html
#+end_src

#+begin_src emacs-lisp
(defun my--htmlize-file (switch)
  "`htmlize-file' seems to have some issues, here is a simpler one."
  (ignore switch)
  (condition-case out
      (progn
        (require 'htmlize)
        (let* ((source (pop command-line-args-left))
               (destination (htmlize-make-file-name (file-name-nondirectory source))))
          (find-file-existing source)
          (with-current-buffer (htmlize-buffer-1)
            (write-region (point-min) (point-max) destination))
          (kill-emacs 0)))
    (error (progn
             (princ out #' external-debugging-output) ; May not be shown due to termcaps, use a redirection.
             (kill-emacs 1)))))

(use-package s) ; For s-suffix? below.

(use-package htmlize
  :init
  (add-to-list 'command-switch-alist '("--htmlize" . my--htmlize-file))
  :config
  ;; Use the Iosevka font when available (ligatures are nice touch).
  ;; Requires fontconfig, works on Linux and macOS (use the %{=unparse} format
  ;; to see all options).
  ;; The base Iosevka font seems to produce some irregularities (for example
  ;; `let-alist' and `use-package' seem to be slightly larger), so use Iosevka
  ;; Term instead.
  (let* ((fc-match "fc-match -f '%{file}' ':file=*/iosevka-regular.woff2'")
         (path (shell-command-to-string fc-match)))
    ;; fc-match might fallback to something else...
    (when (s-suffix? "iosevka-regular.woff2" path)
      (setq htmlize-head-tags
            (format (concat
                     "<style type=\"text/css\">"
                     "@font-face { font-family: \"Iosevka Term\"; src: url(data:font/woff2;base64,%s) format('truetype'); }"
                     "pre { font-family: \"Iosevka Term\"; font-size: 10pt; }"
                     "</style>")
                     (base64-encode-string (with-temp-buffer (insert-file-contents path) (buffer-string)) t)))))
  :hook ((htmlize-before . (lambda ()
                             ;; Disable some modes that may influence rendering (the original buffer
                             ;; is protected, there is no need to restore anything).
                             ;; Flycheck handling (it uses special faces that are not nicely rendered).
                             (when (bound-and-true-p flycheck-mode) (flycheck-mode))
                             ;; Disable current line highlighting (both a function and a variable).
                             (when (bound-and-true-p global-hl-line-mode) (global-hl-line-unhighlight))
                             ;; TODO: LSP stuff
                             ;; (sit-for 3) ; See the changes made to the buffer.
                             ))))
#+end_src

*** Completion

For minibuffer completion there are a lot of choices. There is the
built-in Ido, but it requires to be extended by multiple packages
(like Smex or =ido-vertical-mode=). There is also
[[https://github.com/abo-abo/swiper][Ivy]] or
[[https://github.com/raxod502/selectrum][Selectrum]] but both have
issues
([[https://github.com/raxod502/selectrum#ivy][complexity]] or
[[https://github.com/minad/vertico/issues/1#issuecomment-813558238][speed]]
and reusability). We'll rely on
[[https://github.com/minad/vertico][Vertico]]:

#+begin_src emacs-lisp
(use-package vertico
  :hook (after-init . vertico-mode))
#+end_src

And extend the results with additional information:

#+begin_src emacs-lisp
(use-package marginalia
  :hook (after-init . marginalia-mode))
#+end_src

For in-buffer completion, [[http://company-mode.github.io/][Company]]
is ubiquitous and extended by many packages, so we'll rely on it:

#+begin_src emacs-lisp
(use-package company
  :hook (after-init . global-company-mode)
  :config
  (setq company-dabbrev-downcase nil ; Case sensitive dabbrev completion.
        company-idle-delay 0 ; No delay before showing completion.
        company-minimum-prefix-length 2 ; Start completing sooner.
        company-tooltip-align-annotations t ; Align annotations to the right.
        ;; For some reason they enable broken backends, like company-clang, by
        ;; default (and considering there is LSP, this is just superfluous).
        company-backends '(company-capf)))
#+end_src

Then, the completion style (honored by =company-capf=) can be tuned to
provide more flexibility, like fuzzy matching. We do that with
[[https://github.com/oantolin/orderless][Orderless]]:

#+begin_src emacs-lisp
(use-package orderless
  :config
  (setq completion-styles '(basic orderless) ; I don't really care about the others.
        orderless-matching-styles '(orderless-flex) ; Multiple subsequence matching.
        ;; Only use `completion-styles'.
        completion-category-defaults nil
        completion-category-overrides nil))
#+end_src

*** Whitespace

Correct whitespace handling is important (to get cleaner diffs for example).
However, Emacs' =whitespace-mode= seems to have some problems (as an example,
its faces mess up with the text's properties in Circe). Fortunately,
[[https://github.com/glasserc/ethan-wspace][ethan-wspace]] aims to do much
better:

#+begin_src emacs-lisp
(use-package ethan-wspace
  :hook (after-init . global-ethan-wspace-mode)
  :config
  (setq mode-require-final-newline nil)) ; Don't automatically add final newlines.
#+end_src

It's nice to be able to display all white spaces sometimes and =whitespace-mode=
is still the best here:

#+begin_src emacs-lisp
(use-package whitespace
  ;; The default values of `whitespace-style' and `whitespace-line-column'
  ;; seem good enough.
  :bind (("<f12>" . whitespace-mode)))
#+end_src

*** Moving around

Jumping around between words and buffers is easy with
[[https://github.com/abo-abo/avy][Avy]].

Use =C-o $letter $characters= to jump to the first letter of a word. The
characters are directly overlayed on the words.

Use =M-o [x (delete) | m (swap) | ...] $index= to jump to/act on a buffer. The
index appears in the top left corner.

#+begin_src emacs-lisp
(use-package avy
  :bind (("C-o" . avy-goto-word-or-subword-1))) ; Override open-line default binding.

;; Despite the name, it's Avy-based.
(use-package ace-window
  :bind (("M-o" . ace-window)) ; Override facemenu default binding.
  :config
  (setq aw-background nil)) ; Don't remove colors.
#+end_src

And to move regions or lines (Magit commit buffer-style):

#+begin_src emacs-lisp
(use-package move-text
  :bind (("M-n" . move-text-down)
         ("M-p" . move-text-up)))
#+end_src

** Extensions

Add the =lisp= directory to the load path in case additionial libraries are
stored there:

#+begin_src emacs-lisp
(add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory))
#+end_src

*** Remembering keybindings

[[https://github.com/justbur/emacs-which-key][which-key]] will display a pop-in
during key combinations:

#+begin_src emacs-lisp
(use-package which-key
  :hook (after-init . which-key-mode)
  :config
  (setq which-key-separator " "))
#+end_src

*** Error checking

[[https://flycheck.readthedocs.io][Flycheck]] aims to replace Emacs' built-in
Flymake. It supports many modes and checkers out the box and is often used by
other packages (note Eglot uses Flymake).

#+begin_src emacs-lisp
(use-package flycheck
  :hook (prog-mode . flycheck-mode)
  :config
  (setq flycheck-checker-error-threshold nil ; Don't stop after a large number of errors.
        flycheck-temp-prefix ".flycheck")) ; Hide temporary files.
#+end_src

*** Git

[[https://github.com/magit/magit][Magit]] is the go-to Git wrapper in Emacs,
sometimes used as a dependency.

#+begin_src emacs-lisp
(use-package magit
  :config
  (setq magit-diff-refine-hunk 'all))
#+end_src

*** Snippets

[[https://github.com/joaotavora/yasnippet][YASnippet]] is a template system,
sometimes used as a dependency.

#+begin_src emacs-lisp
(use-package yasnippet
  :hook (after-init . yas-global-mode)
  :config
  (setq yas-verbosity 0))
#+end_src

*** Programming

**** [[https://microsoft.github.io/language-server-protocol/][Language Server Protocol]]

LSP abstracts most programming languages environment configurations (as many of
them now provide a server implementing this protocol). It means you'll have a
consistent experience without needing to produce a (sometimes complex)
language-specific configuration.

[[https://github.com/joaotavora/eglot][Eglot]] is a lightweight alternative to
[[https://github.com/emacs-lsp/lsp-mode][lsp-mode]], which has the unfortunate
habit of piling up features and enabling them all by default (for example, while
LSP UI has a few nice features it's extremely
[[https://github.com/emacs-lsp/lsp-mode/blob/master/docs/tutorials/how-to-turn-off.md][noisy]]
and often breaks in the terminal).

#+begin_src emacs-lisp
(use-package eglot
  :config
  (setq eglot-sync-connect nil) ; Asynchronously establish the connection.
  (add-to-list 'eglot-ignored-server-capabilities :inlayHintProvider) ; Eliminate noisy hints.
  ;; In case a language server is too verbose and pollutes the echo area, it's
  ;; possible to omit hover information with:
  ;;  (setq eldoc-display-functions '(eldoc-display-in-buffer)) ; Available with C-h .
  ;; Or limit the number of lines with `eldoc-echo-area-use-multiline-p' as done
  ;; for rust-analyzer below...
  )
#+end_src

**** Literate programming

I started writing this file using [[https://github.com/phillord/lentic][lentic]]
but now use [[https://github.com/polymode/polymode][polymode]]:

#+begin_src emacs-lisp
(use-package poly-markdown
  :bind (:map polymode-mode-map ; Clear the override of move-text.
              ("M-n" . nil)))

(use-package poly-org)
(use-package poly-rst)
#+end_src

**** [[http://wiki.portal.chalmers.se/agda/pmwiki.php][Agda]]

Nothing special here, the mode should be installed alongside the compiler:

#+begin_src emacs-lisp
(when (require 'agda2 nil t))
#+end_src

**** [[https://mlochbaum.github.io/BQN][BQN]]

#+begin_src emacs-lisp
(use-package bqn-mode
  ;; If the layout isn't installed, use \ to enter the characters.
  :hook (bqn-mode . (lambda () (set-input-method "BQN-Z"))))
#+end_src

**** C

Style configuration:

#+begin_src emacs-lisp
(c-set-offset 'case-label '+) ; Indent case in switch.
(setq c-basic-offset tab-width
      c-default-style "k&r")
#+end_src

clangd should work out of the box with =compile_commands.json=, which can be
generated with [[https://github.com/Kitware/CMake][CMake]]:

#+begin_src emacs-lisp
(use-package cmake-mode)
#+end_src

Set up =.dir-locals.el=:

#+begin_src emacs-lisp :tangle no
((c-mode . ((eval . (progn (require 'eglot)
                           (add-to-list 'eglot-server-programs '(c-mode . ("clangd" "-header-insertion=never")))
                           (eglot-ensure))))))
#+end_src

To format source code relying on
[[https://clang.llvm.org/docs/ClangFormat.html][clang-format]]:

#+begin_src emacs-lisp
(when (require 'clang-format nil t)
  ;; (global-set-key [C-M-tab] 'clang-format-region)
  )
#+end_src

**** [[https://www.dartlang.org/][Dart]]

It works nicely with [[https://flutter.io/][Flutter]], for a full terminal-based
setup.

You'll need to install the language server with:

#+begin_src shell :tangle no
pub global activate dart_language_server
#+end_src

#+begin_src emacs-lisp
(use-package dart-mode)
#+end_src

**** [[https://www.opengl.org/][GLSL]]

Mainly for syntax highlighting and indentation.

#+begin_src emacs-lisp
(use-package glsl-mode
  :config
  ;; Same as https://github.com/dominikh/go-mode.el/pull/212
  (modify-syntax-entry ?_ "_" glsl-mode-syntax-table))
#+end_src

**** [[https://golang.org/][Go]]

#+begin_src emacs-lisp
(use-package go-mode
  :config
  ;; https://github.com/dominikh/go-mode.el/pull/212
  (modify-syntax-entry ?_ "_" go-mode-syntax-table))
#+end_src

**** [[https://www.idris-lang.org/][Idris]]

No LSP here, as it has its own mode to handle the REPL, interactive proofs, etc.

#+begin_src emacs-lisp
(use-package idris-mode
  :config
  (setq idris-repl-banner-functions nil)) ; Disable startup animation.
#+end_src

**** [[https://www.lua.org/][Lua]]

Mainly for syntax highlighting and indentation.

#+begin_src emacs-lisp
(use-package lua-mode
  :config
  (setq lua-indent-level tab-width))
#+end_src


**** [[https://nixos.org][Nix]]

#+begin_src emacs-lisp
(use-package nix-mode)
#+end_src

**** [[https://www.openscad.org/][OpenSCAD]]

Mainly for syntax highlighting and indentation.

#+begin_src emacs-lisp
(use-package scad-mode)
#+end_src

**** [[https://www.python.org/][Python]]

You'll need to install a
[[https://github.com/python-lsp/python-lsp-server][Python language server]]
with:

#+begin_src shell :tangle no
pip install -U python-lsp-server[all]
#+end_src

Set up =.dir-locals.el=:

#+begin_src emacs-lisp :tangle no
((python-mode . ((eval . (progn (require 'eglot) ; Defaults to pylsp.
                                (eglot-ensure))))))
#+end_src

Flycheck should automatically use the installed linters, like
[[http://www.mypy-lang.org/][mypy]].

**** [[https://www.rust-lang.org/][Rust]]

[[https://github.com/brotzeit/rustic][rustic]] is a fork of
[[https://github.com/rust-lang/rust-mode][rust-mode]] with supposedly more
features and a better integration (like out of the box support for Flycheck).

#+begin_src emacs-lisp
(use-package rustic
  :hook (rustic-mode . (lambda () (setq fill-column 100)))
  :config
  (setq rustic-format-on-save t
        rustic-indent-offset tab-width
        rustic-lsp-client nil) ; See the directory variables below.
  ;; TODO: `eglot--hover-info' does its best and renders the single giant
  ;; markdown file (with `gfm-view-mode') that rust-analyzer returns.
  ;; Definitions are one of the major offenders:
  ;;  ```rust
  ;;  type
  ;;  ```
  ;;
  ;;  ```rust
  ;;  function
  ;;  ```
  ;;
  ;;  ---
  ;;
  ;;  documentation...
  ;;
  ;; Setting `eldoc-echo-area-use-multiline-p' to a number of lines appears to
  ;; be the best, but still quite lacking, workaround. ElDoc isn't aware of the
  ;; rendering done by the mode so the number is about actual text lines.
  (setq eldoc-echo-area-use-multiline-p
        (+ 6 ; For definitions, include up to the first line of code in the second code block.
           1)) ; For `eldoc-echo-area-display-truncation-message'.
  ;; For the above example, that amounts to 4 rendered lines:
  ;;  type
  ;;
  ;;  function
  ;;  (Documentation truncated. Use `M-x eldoc-doc-buffer' to see rest)
  ;;
  ;; It doesn't seem possible to tell ElDoc to strip the empty lines (preferably
  ;; only in the echo area, likely by advicing `eldoc--echo-area-render').
  ;; Of course, that means stuff might actually display 7 lines worth of content
  ;; or be truncated inconsistenly.
  )
#+end_src

Set up =.dir-locals.el=:

#+begin_src emacs-lisp :tangle no
((rustic-mode . ((eval . (progn (setq rustic-lsp-client 'eglot)
                                (setq rustic-compile-directory-method 'rustic-buffer-workspace)
                                (eglot-ensure))))))
#+end_src

**** Scheme

#+begin_src emacs-lisp
(use-package geiser)
(use-package geiser-guile)
#+end_src

**** Shell

Well, nothing much here as I don't know of any viable checker that can correctly
handle all of Bash's tricks.

#+begin_src emacs-lisp
(setq sh-basic-offset tab-width)
(add-hook 'sh-mode-hook (lambda () (sh-electric-here-document-mode 0))) ; Disable the annoying heredoc EOF completion.
#+end_src

**** [[https://yaml.org/][YAML]]

I only want comments to work out of the box.

#+begin_src emacs-lisp
(defconst my--yaml-mode-syntax-table
  (let ((st (make-syntax-table)))
    (modify-syntax-entry ?# "<" st)
    (modify-syntax-entry ?\n ">" st)
    st))

(define-derived-mode my-yaml-mode fundamental-mode "YAML"
  (setq-local comment-start "#"))

(add-to-list 'auto-mode-alist '("\\.ya?ml$" . my-yaml-mode))
#+end_src

*** Text

**** Spell checking

You'll need to install [[https://hunspell.github.io/][Hunspell]].

Dictionaries may or may not be provided by your distribution. On Debian,
dictionaries are available via =hunspell-*= packages. You can always retrieve
=.aff= & =.dic= files here:
- =en_*=: http://wordlist.aspell.net/dicts/
- =fr-*=: https://grammalecte.net/download.php?prj=fr

Setup is a bit tricky:

#+begin_src emacs-lisp
;; http://emacs.stackexchange.com/a/21379

(defconst my--spellchecker "hunspell")
(defconst my--languages "fr-toutesvariantes,en_US")

(if (and (>= emacs-major-version 25)
         (executable-find my--spellchecker)
         (require 'ispell nil t))
    (progn
      (setq ispell-program-name my--spellchecker)
      (setq ispell-dictionary my--languages)
      ;; The following may crash with:
      ;;   Wrong type argument: stringp, nil
      ;; If Hunspell isn't able to find dictionaries:
      ;;   export LC_ALL=en_US.UTF-8
      ;;   export DICPATH=~/Library/Spelling
      ;; Use 'hunspell -D' to check Hunspell's environment.
      (ispell-set-spellchecker-params)
      (ispell-hunspell-add-multi-dic my--languages)
      ;; It significantly slows down Emacs, so no `prog-mode-hook' for now.
      ;; (add-hook 'prog-mode-hook 'flyspell-prog-mode)
      ;; (add-hook 'text-mode-hook 'ispell-buffer)
      ;; (add-hook 'prog-mode-hook 'ispell-comments-and-strings)
      ;; (add-hook 'text-mode-hook 'flyspell-buffer)
      (add-hook 'text-mode-hook 'flyspell-mode))
  (message "Unable to load ispell due to missing dependency."))
#+end_src

If not run automatically, use =M-x flyspell-{buffer,mode}=. Use =M-$= to correct
an highlighted word.

It may cause noticeable slowdowns.

**** [[https://wiki.contextgarden.net/][ConTeXt]]

I currently don't like the existing
[[https://www.gnu.org/software/auctex/][AUCTeX]] support and the default
=plain-tex-mode= doesn't fit with ConTeXt, so the setup is rather minimal...

#+begin_src emacs-lisp
(defconst my--context-mode-syntax-table
  (let ((st (make-syntax-table)))
    (modify-syntax-entry ?% "<" st)
    (modify-syntax-entry ?\n ">" st)
    st))

(define-derived-mode my-context-mode
  text-mode ; So spell checking works (but it also checks commands...).
  "ConTeXt"
  (setq-local comment-start "%"))

(add-to-list 'auto-mode-alist '("\\.tex$" . my-context-mode))
#+end_src

**** Markdown

#+begin_src emacs-lisp
(use-package markdown-mode
  :bind (:map markdown-mode-map ; Clear the override of move-text.
              ("M-n" . nil)
              ("M-p" . nil)))
#+end_src

**** [[https://orgmode.org/][Org]]

#+begin_src emacs-lisp
(use-package org ; Use the embedded Org.
  :config
  (setq org-link-descriptive nil ; Don't shorten links.
        org-replace-disputed-keys t ; windmove keybindings conflict.
        org-startup-folded "nofold" ; Don't fold sections when opening a buffer.
        org-adapt-indentation nil ; Don't (de)indent when demoting or promoting headings.
        org-edit-src-content-indentation 0)) ; Don't indent code blocks.
#+end_src

Since the whole point of this document is to be readable on GitHub, let's
automatically generate a table of contents:

#+begin_src emacs-lisp
(use-package toc-org
  :hook (org-mode . toc-org-enable))
#+end_src

**** gettext

On Debian, install =gettext-el=.

#+begin_src emacs-lisp
(require 'po-mode nil t)
#+end_src

**** man

#+begin_src emacs-lisp
;; No maximum width.
(setq Man-width-max nil)
(setq woman-fill-column nil)
#+end_src

*** Social

**** IRC

[[https://github.com/jorgenschaefer/circe][Circe]] is an alternative to built-in
IRC clients:

#+begin_src emacs-lisp
(use-package circe
  :config
  ;; Logging.
  (setq lui-logging-directory "~/.logs" ; Default.
        lui-logging-file-format "irc/{network}/{target}.txt"
        lui-logging-format "[%F %T %Z] {text}")

  ;; UI.
  (setq lui-fill-type nil ; No text wrapping.
        lui-time-stamp-format "%H:%M"
        lui-time-stamp-position 'right-margin)
  (add-hook 'circe-mode-hook (lambda () (setq-local right-margin-width 5)))

  (setq lui-flyspell-p t ; Enable spell checking (see [[Spell checking]]).
        lui-max-buffer-size (* 1 1024 1024)) ; Scrollback.

  ;; Periodically ping the server.
  (require 'circe-lagmon)
  (add-hook 'circe-mode-hook 'circe-lagmon-mode)

  ;; Colorize nicks.
  (require 'circe-color-nicks)
  (enable-circe-color-nicks)

  ;; Log a new day.
  (require 'circe-new-day-notifier)
  (enable-circe-new-day-notifier)

  (setq circe-format-server-topic "*** Topic change by {nick} ({userhost}): {topic-diff}" ; topic-diff instead of new-topic.
        circe-reduce-lurker-spam t
        ;; No display difference between others and me.
        circe-format-self-say circe-format-say
        circe-format-self-action circe-format-action
        ;; Anonymization.
        circe-default-quit-message ""
        circe-default-part-message ""
        ;; Avoid identity leak (for example, realname defaults to `user-full-name').
        ;; Servers can refuse empty identifiers.
        circe-default-user circe-default-nick
        circe-default-realname circe-default-nick))
#+end_src

Your setup might look like this:

#+begin_src emacs-lisp :tangle no
(setq circe-network-options '(
  ("Libera Chat"
   :logging t
   :nick "nick" :user "nick" :realname "nick" :nickserv-password "password"
   :channels (:after-cloak "#channel1" "#channel2")) ; Or :after-auth.
  ("Twitch" :host "irc.twitch.tv" :port 6697 :tls t
   :logging t
   :lagmon-disabled t ; Twitch doesn't support CTCP.
   :nick "login" :user "login" :realname "login" :pass "oauth:token"
   :channels ("#channel1" "#channe2"))))

(add-hook 'circe-server-connected-hook
          (lambda ()
            (with-circe-server-buffer
             (when (string= circe-network "Twitch")
               ;; https://dev.twitch.tv/docs/irc/guide#twitch-irc-capabilities
               (circe-command-QUOTE "CAP REQ :twitch.tv/membership")))))

(defun my--circe-idlerpg-login (connection event sender target &rest args)
  (with-current-buffer (irc-connection-get connection :server-buffer)
    (when (and (string= circe-network "network")
               (string= target "#idlerpg")
               (irc-current-nick-p connection (irc-userstring-nick sender)))
      (circe-command-MSG "idlerpg" "LOGIN login password"))))

(add-hook 'circe-mode-hook
          (lambda ()
            (let ((table (circe-irc-handler-table)))
              (irc-handler-remove table "JOIN" #'my--circe-idlerpg-login) ; Prevent duplicate entries.
              (irc-handler-add table "JOIN" #'my--circe-idlerpg-login))))
#+end_src

**** [[https://notmuchmail.org/][Notmuch]]

I use Notmuch for emails and feeds (via gwene.org) but the configuration is too
personal to have it here. I tried Gnus.
